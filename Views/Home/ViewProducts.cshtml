@{
    ViewData["Title"] = "View Products";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    
    
    <link href="~/css/tailwind.min.css" rel="stylesheet">
    <style>
        
        .modal {
            display: none;
        }

        .modal-content {
            max-width: 500px; 
            margin: 0 auto;
        }
    </style>
</head>
<body class="bg-gray-100">
    <br>
<center><h5>View Products</h5></center>
<div class="container mx-auto py-8">
    <div class="flex justify-center">
        <div class="w-full md:w-3/4 lg:w-2/3 xl:w-4/5">
            
            <table class="w-full bg-white rounded-lg p-4 border-collapse border">
                <thead>
                    <tr>
                        <th class="border p-2">Name</th>
                        <th class="border p-2">Price</th>
                        <th class="border p-2">Description</th>
                        <th class="border p-2"></th>
                    </tr>
                </thead>
                <tbody id="productListTable">
                    
                </tbody>
            </table>
        </div>
    </div>
</div>


<div id="editProductModal" class="modal fixed inset-0 flex items-center justify-center">
    <div class="modal-content bg-white rounded-lg p-4">
   
        <input type="hidden" id="EditProductId" name="EditProductId">
        <input type="text" id="EditProductName" name="EditProductName" class="w-full mb-4 p-2 rounded border" placeholder="Product Name">
        <input type="text" id="EditProductPrice" name="EditProductPrice" class="w-full mb-4 p-2 rounded border" placeholder="Product Price">
        <textarea id="EditProductDescription" name="EditProductDescription" class="w-full mb-4 p-2 rounded border" placeholder="Product Description"></textarea>
        <button id="saveEditButton" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700">Save Changes</button>
    </div>
</div>


<div id="deleteProductModal" class="modal fixed inset-0 flex items-center justify-center">
    <div class="modal-content bg-white rounded-lg p-4">
        <p>Are you sure you want to delete this product?</p>
        <button id="confirmDeleteButton" class="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-700">Confirm Delete</button>
        <button id="cancelDeleteButton" class="bg-gray-300 text-gray-700 py-2 px-4 rounded hover:bg-gray-400">Cancel</button>
    </div>
</div>

<script>

    function createProductItem(product) {
        const productListTable = document.getElementById("productListTable");
        const productItem = document.createElement("tr");
        productItem.innerHTML = `
            <td class="border p-2">${product.name}</td>
            <td class="border p-2"><B>R</B>${product.price}</td>
            <td class="border p-2">${product.description}</td>
            <td class="border p-2">
  <button class="edit-button bg-blue-500 hover:bg-blue-700 py-2 px-4 rounded shadow-md text-white" data-id="${product.id}">Update</button>
        <button class="delete-button bg-red-500 hover:bg-red-700 py-2 px-4 rounded shadow-md text-white" data-id="${product.id}">Delete</button>
            </td>
        `;
        productListTable.appendChild(productItem);
    }

  


   
    document.getElementById("cancelDeleteButton").addEventListener("click", function () {
        
        const deleteModal = document.getElementById("deleteProductModal");
        deleteModal.style.display = "none";
    });


function fetchProducts() {

    fetch("/api/captureproduct/Products")
        .then(response => response.json())
        .then(products => {
            const productListTable = document.getElementById("productListTable");
            productListTable.innerHTML = ''; 

            products.forEach(product => {
                createProductItem(product);
            }); 
        })
        .catch(error => {
            console.error("Error fetching products:", error);
        });
}


  
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("edit-button")) {
            const productId = event.target.getAttribute("data-id");
            editProduct(productId);
        }
    });


    document.getElementById("saveEditButton").addEventListener("click", function () {
      
        const editedProductId = document.getElementById("EditProductId").value;
        const editedProductName = document.getElementById("EditProductName").value;
        const editedProductPrice = document.getElementById("EditProductPrice").value;
        const editedProductDescription = document.getElementById("EditProductDescription").value;


        const editedProductData = {
            id: editedProductId,
            name: editedProductName,
            price: editedProductPrice,
            description: editedProductDescription
        };


        fetch(`/api/captureproduct/Products/${editedProductId}`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(editedProductData)
        })
        .then(response => {
            if (response.ok) {
           
                const editModal = document.getElementById("editProductModal");
                editModal.style.display = "none";

             
                fetchProducts();

                console.log("Product updated successfully.");
            } else {
        
                console.error("Error updating product.");
            }
        })
        .catch(error => {
            console.error("Error updating product:", error);
        });
    });


    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("delete-button")) {
            const productId = event.target.getAttribute("data-id");
            deleteProduct(productId);
        }
    });


  function editProduct(id) {

    const editModal = document.getElementById("editProductModal");

    fetch(`/api/captureproduct/Products/${id}`)
        .then(response => response.json())
        .then(product => {
            document.getElementById("EditProductId").value = product.id;
            document.getElementById("EditProductName").value = product.name;
            document.getElementById("EditProductPrice").value = product.price;
            document.getElementById("EditProductDescription").value = product.description;

           
            editModal.style.display = "block";
        })
        .catch(error => {
            console.error("Error fetching product details:", error);
        });
}


    function deleteProduct(id) {
     
        const deleteModal = document.getElementById("deleteProductModal");
        deleteModal.style.display = "block";

    
        document.getElementById("confirmDeleteButton").onclick = function () {
    
            fetch(`/api/captureproduct/Products/${id}`, {
                method: "DELETE"
            })
            .then(response => {
                if (response.ok) {
       
                    deleteModal.style.display = "none";

             
                    fetchProducts();

                    console.log("Product deleted successfully.");
                } else {
       
                    console.error("Error deleting product.");
                }
            })
            .catch(error => {
                console.error("Error deleting product:", error);
            });
        };
    }
    fetchProducts();
</script>
</body>
</html>